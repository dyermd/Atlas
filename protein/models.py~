from django.db import models
from source.models import Source
from annotation.models import Annotation

# Create your models here.
class Protein(models.Model):
    uniprot_id = models.CharField(max_length=100)
    uniprot_id.primary_key=True
    gene_name = models.CharField(max_length=100)
    description = models.TextField()
    sequence = models.TextField()
    taxonomy_id = models.IntegerField(default=9606)

    def __unicode__(self):
        return self.uniprot_id

    class Meta:
        verbose_name = "Protein"
        verbose_name_plural = "Proteins"

class Protein_Xref(models.Model):
    protein = models.ForeignKey(Protein)
    source = models.ForeignKey(Source)
    xref = models.CharField(max_length=100)

    def __unicode__(self):
        return(self.protein + " " + source.name + " " + xref)

    class Meta:
        verbose_name = "Protein Xref"
        verbose_name_plural = "Protein Xrefs"

class Annotated_With(models.Model):
    protein = models.ForeignKey(Protein)
    annotation = models.ForeignKey(Annotation, related_name="protein_annotation")

    def __unicode__(self):
        return(self.protein.uniprot_id + " " + self.annotation.description)

    class Meta:
        verbose_name = "Annotated With"
        verbose_name_plural = "Annotated With"

class Feature_Model(models.Model):
    source = models.ForeignKey(Source)
    version = models.CharField(max_length=25)

    def __unicode__(self):
        return(self.source.name + " " + self.version)

    class Meta:
        verbose_name = "Feature Model"
        verbose_name_plural = "Feature Models"

class Feature_Type(models.Model):
    type = models.CharField(max_length=25)
    type.primary_key = True

    def __unicode__(self):
        return(self.type)

    class Meta:
        verbose_name = "Feature Type"
        verbose_name_plural = "Feature Types"

class Feature(models.Model):
    protein = models.ForeignKey(Protein)
    model = models.ForeignKey(Feature_Model)
    type = models.ForeignKey(Feature_Type)
    chromosome = models.IntegerField()
    start_position = models.IntegerField()
    end_position = models.IntegerField()
    strand = models.CharField(max_length=1)

    def __unicode__(self):
        return(self.protein.uniprot_id + " " + self.type)

    class Meta:
        verbose_name = "Feature"
        verbose_name_plural = "Features"

